#store all of the settings of the fps

controllers[
	control01[
		type keyboard-mouse
		id input_01
	]
]



physics[
	step .01
	fps 100
	gravity 0,-9.81,0
	auto-disable true
	auto-disable-steps 10
]

map[
	model "include/assets/models/01_the_beach/01_the_beach.obj"
]

views[
	default[
		location TOP_LEFT
		x-offset 0
		y-offset 0
		width 1
		height 1
		shader shaded_fog
		#shader d_light
		camera firstperson
		id default_view
	]
	
#	other[
#		width .5
#		height .5
#		x-offset .25
#		y-offset .25
#		location MIDDLE
#		shader fog
#	]
]
		
		
# include any cameras that the controller should use
# cameras are created, but not enabled by default.
cameras[

#	_default[
#		type attached
#		controller keyboard_mouse
#		fov 45
#		position 0,100,40
#		clipping-plane-far 400
#		clipping-plane-near 3
#	]
#	default[
#		type attached
#		object player01
#		position 0,324,5
#	]
	
	firstperson[
		type fps
		position 0,240,10
		enabled true
		id fps_camera
		clipping-plane-far 2000
		#clipping-plane-near .15
	]
	
#	things[
#		type fpse
#		controller keyboard_mouse
#		fov 45
#		position 0,0,100
#		clipping-plane-far 1000
#		clipping-plane-near 4
#	]
]

#rules[

#	spawn-points[
#		start[
#			offset 0,0,110
#		]
#	]
#	
#	goals[

		
		#sets where the player or players needs to 
		#get to to end the engine control. The destination
		#order is how the destinations(1 or more) can be 
		#handled. It should take the following
		# - forward (one after the other, from first to last)
		# - reverse (one after the other, from last to first)
		# - random (every time a random single
		destination-order serial
		# - any (any single destination)
		# - all (every destination)
		# - loop (every destination, and it starts over when the last one is reached)
#		destination-goal all
#		destinations[
#			01[
#				offset 30,40,-100
#				radius 100
#			]
#			02[
#				offset -40,40,-200
#				radius 10
#			]
#		
#		]
#		
#	]#end of goals
#]  #end of rules

objects[
#	crate001[
#		offset 0,120,0
#		type crate
#		enabled true
#	]

	
	#-------------------------------------
	# EXAMPLE SPAWNER SETTINGS
	# a spawner generates copies of any 
	# other objects at a location every
	# n ticks of the game engine.
	#-------------------------------------
	spawner001[
		type spawner 		#tell the engine that this a spawner object
		offset 0,60,0		#set the offset of the spawner in world space
		spawn crate			#set what type of object to create
		#total-spawns 10	#set how many times to spawn the given object
		duration 400		#alternatively, set  the number of ticks to spawn
							#for. overriden by (total-spawns)
		interval 30			#ticks between each spawn
		inherit-velocity 1	#the amount that the velocity of the spawner should
							#affect the starting velocity of the spawn
	]
	
	spawner002[
		type spawner
		spawn crate
		offset -10,30,20
		duration 6000
		interval 50
		inherit-velocity 1
		velocity 0,10,0
	]
	
	portal01[
		type portal
		offset 0,7,-10
	]
	
	
	fire001[
		type fire
		offset 10,6,5
		radius 3
		interval 20
		intensity 6
	]
	
	
	fire002[
		type fire
		offset 3,6,5
		radius 1
		interval 20
		intensity 1
	]
	
	fire003[
		type fire
		offset 0,7,-10
		radius 1
		interval 30
		intensity 1
	]
	
	
	#pickup001[
	#	type pickup
	#	spawn health-pack
	#	offset -40,8,0
	#	radius 1
	#]
	
	pickup002[
		type pickup
		spawn ak47
		offset 0,7,0
		radius 2
	]
	

	barrel01[
		type barrel
		offset 6,6,8
	]
	
	barrel02[
		type barrel
		offset 5.9,8,8
	]
	
	
	player01[
		type player
		#view default
		offset 10,8,0
		rotation 0,0
		camera fps_camera
		controller input_01
		#id player_the_shiznit
		#primary-weapon glock19
	]
	
]